
一：首先理解左值，右值、纯右值、将亡值，通用引用的概念。
	左值：可以取地址的、有名字的就是左值。（a=b+c,其中可以对a取地址&a，a是一个左值）
	右值：不能取地址，没有名字的就是右值。（a=b+c,其中不可以对b+c取地址，(b+c)是一个右值）
	【c++11以后右值拆分两个概念一个是将亡值，一个是纯右值】
	将亡值：c++11新增的和右值引用相关的表达式，比如右值引用T&&的函数返回值、std::move的返回值、或者转换为T&&的类型转换函数的函数返回值
	纯右值：（即c++98中右值得概念）运算表达式、临时变量产生的值、类型转换函数的返回值、lambda表达式等 
    通用引用：【博弈看到T&&不一定就是右值得引用】T&&”的另外一个含义是：既可以是rvalue reference也可以是lvalue reference。这样的
references在代码中看起来像是rvalue reference（即"T&&"），我把这样的全能称之为Universal Reference。
二：模板类型推导总结：
template<typename T>
void f(ParamType param);
f(expr); // 从expr推导出T和ParamType的
1：ParamType is a Reference or Pointer, but not a Universal Reference
   template<typename T>
   void f(T& param); // param是一个引用
  定义：int x = 27; // x是一个int  
        const int cx = x; // cx是一个const int  
        const int& rx = x; // rx是const int的引用
    f(x); // T是int，param的类型时int&
    f(cx); // T是const int， param的类型是const int&
    f(rx); // T是const int， param的类型时const int&
    
    template<typename T>
    void f(T* param); // param是一个指针
    定义：int x = 27; // 和之前一样
    const int *px = &x; // px是一个指向const int x的指针
    f(&x); // T是int，param的类型是int*
    f(px); // T是const int ，param的类型时const int*
    推导规则：忽略引用类型，推导携带cv属性。
2：ParamType is a Universal Reference
    template<typename T>
    void f(T&& param); // param现在是一个通用的引用
    
定义：int x = 27; // 和之前一样
    const int cx = x; // 和之前一样
    const int& rx = x; // 和之前一样
    f(x); // x是左值，所以T是int&， param的类型也是int&
    f(cx); // cx是左值，所以T是const int&，param的类型也是const int&
    f(rx); // rx是左值，所以T是const int&， param的类型也是const int&
    f(27); // 27是右值，所以T是int， 所以param的类型是int&&
    推导规则：左值均推导为左值得引用类型，cv属性携带。
    
    
3：ParamType is Neither a Pointer nor a Referen
    template<typename T>
    void f(T param); // param现在是pass-by-value
    int x = 27; // 和之前一样
    const int cx = x; // 和之前一样
    const int& rx = x; // 和之前一样
    f(x); // T和param的类型都是int
    f(cx); // T和param的类型也都是int
    f(rx); // T和param的类型还都是int
    推导规则：去引用，去cv限定。
    
    const char* const ptr = "Fun with pointers";// ptr是一个const指针，指向一个const对象
    f(ptr); // 给参数传递的是一个const char * const类型 传递过程中ptr的const特性会被忽略，但是最外层的const限定内容的特性会被推导出来

总结：
三：理解auto类型推导：
除了一个例外，auto类型推导就是模板类型推导。
auto 类型推导通常和模板类型推导类似，但是 auto 类型推导假定花括号初始化代表的类型是 std::initializer_list ，但是模板类型推导却不是这样，auto 在函数返回值或者lambda参数里面执行模板的类型推导，而不是通常意义
的 auto 类型推导。
使用注意：
①我们可以使用valatile，pointer（*），reference（&），rvalue reference（&&） 来修饰auto。
auto k = 5;  
auto* pK = new auto(k);  
auto** ppK = new auto(&k);  
const auto n = 6;  
②用auto声明的变量必须初始化
auto m; // m should be intialized 
③auto不能与其他类型组合连用
auto int p; // 这是旧auto的做法。  
④函数和模板参数不能被声明为auto
void MyFunction(auto parameter){} // no auto as method argument  
template<auto T> // utter nonsense - not allowed  
void Fun(T t){}  
⑤定义在堆上的变量，使用了auto的表达式必须被初始化
int* p = new auto(0); //fine  
int* pp = new auto(); // should be initialized  
auto x = new auto(); // Hmmm ... no intializer  
auto* y = new auto(9); // Fine. Here y is a int*  
auto z = new auto(9); //Fine. Here z is a int* (It is not just an int)
⑥以为auto是一个占位符，并不是一个他自己的类型，因此不能用于类型转换或其他一些操作，如sizeof和typeid
int value = 123;  
auto x2 = (auto)value; // no casting using auto  
auto x3 = static_cast<auto>(value); // same as above   
⑦定义在一个auto序列的变量必须始终推导成同一类型
auto x1 = 5, x2 = 5.0, x3='r';  // This is too much....we cannot combine like this  
⑧auto不能自动推导成CV-qualifiers（constant & volatile qualifiers），除非被声明为引用类型
const int i = 99;  
auto j = i;       // j is int, rather than const int  
j = 100           // Fine. As j is not constant  
// Now let us try to have reference  
auto& k = i;      // Now k is const int&  
k = 100;          // Error. k is constant  
// Similarly with volatile qualifer
⑨auto会退化成指向数组的指针，除非被声明为引用
int a[9];  
auto j = a;  
cout<<typeid(j).name()<<endl; // This will print int*  
auto& k = a;  
cout<<typeid(k).name()<<endl; // This will print int [9]
总结：
四：理解decltype类型推导
decltype 几乎总是得到一个变量或表达式的类型而不需要任何修改
对于非变量名的类型为 T 的左值表达式， decltype 总是返回 T&
C++14 支持 decltype(auto) ，它的行为就像 auto ,从初始化操作来推导类型，但是它推
导类型时使用 decltype 的规则。
总结：

五：理解std::move、std::forward

template<typename T> //C++14; still in
decltype(auto) move(T && param) //namespace std
{
using ReturnType = remove_reference_t<T>&&;
return static_cast<ReturnType>(param);
}
1. std::forward原型

复制代码
template <typename T>
T&& forward(typename std::remove_reference<T>::type& param) //左值引用版本
{
    return static_cast<T&&>(param);
}

template <typename T>
T&& forward(typename std::remove_reference<T>::type&& param)  //右值引用版本
{
    //param被右值初始化时，T应为右值引用类型，如果T被绑定为左值引用则报错。
    static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"  
    " substituting _Tp is an lvalue reference type"); 
    
    return static_cast<T&&>(param);
}

//其中remove_reference的实现如下
//1. 特化版本（一般的类）
template <typename T>
struct remove_reference 
{
    typedef T type;
};

//2. 左值引用版本
template <typename T>
struct remove_reference<T&>
{
    typedef T type;
};

//3. 右值引用版本
template <typename T>
struct remove_reference<T&&>
{
    typedef T type;
};
复制代码
2. 完美转发（Perfect Forwarding）

（1）完美转发：是指在函数模板中，完全依照模板的参数类型（即保持参数的左值、右值特征），将参数传递给函数模板中调用的另外一个函数。

（2）原理分析

复制代码
class Widget{};

//完美转发
template<typename T>
void func(T&& fparam) //fparam是个Universal引用
{
    doSomething(std::forward<T>(fparam));
}

//1. 假设传入func是一个左值的Widget对象， T被推导为Widget&，则forward如下：
Widget& && forward(typename std::remove_reference<Widget&>::type& param)
{
    return static_cast<Widget& &&>(param);
}
//==>引用折叠折后
Widget& forward(Widget& param)
{
    return static_cast<Widget&>(param);
}

//2. 假设传入func是一个右值的Widget对象， T被推导为Wiget，则forward如下：
Widget&& forward(typename std::remove_reference<Widget>::type& param)
{
    return static_cast<Widget&&>(param);
}
复制代码
（3）std::forward和std::move的联系和区别

　　①std::move是无条件转换，不管它的参数是左值还是右值，都会被强制转换成右值。就其本身而言，它没有move任何东西。

　　②std::forward是有条件转换。只有在它的参数绑定到一个右值时，它才转换它的参数到一个右值。当参数绑定到左值时，转换后仍为左值。

　　③对右值引用使用std::move，对universal引用则使用std::forward

　　④如果局部变量有资格进行RVO优化，不要把std::move或std::forward用在这些局部变量中

　　⑤std::move和std::forward在运行期都没有做任何事情。

【编程实验】不完美转发和完美转发

复制代码
#include <iostream>
//#include <utility> //for std::forward
using namespace std;

void print(const int& t)
{
    cout <<"lvalue" << endl;
}

void print(int&& t)
{
    cout <<"rvalue" << endl;
}

template<typename T>
void Test(T&& v) //v是Universal引用
{
    //不完美转发
    print(v);  //v具有变量，本身是左值，调用print(int& t)
    
    //完美转发
    print(std::forward<T>(v)); //按v被初始化时的类型转发（左值或右值）
    
    //强制将v转为右值
    print(std::move(v)); //将v强制转为右值，调用print(int&& t)
}

int main()
{
    cout <<"========Test(1)========" << endl; 
    Test(1); //传入右值
    
    int x = 1;
    cout <<"========Test(x)========" << endl;
    Test(x); //传入左值
    
    cout <<"=====Test(std::forward<int>(1)===" << endl;
    Test(std::forward<int>(1)); //T为int，以右值方式转发1
    //Test(std::forward<int&>(1)); //T为int&，需转入左值
    
    cout <<"=====Test(std::forward<int>(x))===" << endl;
    Test(std::forward<int>(x)); //T为int，以右值方式转发x
    cout <<"=====Test(std::forward<int&>(x))===" << endl;
    Test(std::forward<int&>(x)); //T为int，以左值方式转发x
    
    return 0;
}
/*输出结果
e:\Study\C++11\16>g++ -std=c++11 test2.cpp
e:\Study\C++11\16>a.exe
========Test(1)========
lvalue
rvalue
rvalue
========Test(x)========
lvalue
lvalue
rvalue
=====Test(std::forward<int>(1)===
lvalue
rvalue
rvalue
=====Test(std::forward<int>(x))===
lvalue
rvalue
rvalue
=====Test(std::forward<int&>(x))===
lvalue
lvalue
rvalue
*/
复制代码
3.万能的函数包装器

（1）利用std::forward和可变参数模板实现

　　①可将带返回值、不带返回值、带参和不带参的函数委托万能的函数包装器执行。

　　②Args&&为Universal引用，因为这里的参数可能被左值或右值初始化。Funciont&&也为Universal引用，如被lambda表达式初始化。

　　③利用std::forward将参数正确地（保持参数的左、右值属性）转发给原函数

【编程实验】万能的函数包装器

复制代码
#include <iostream>
using namespace std;

//万能的函数包装器
//可将带返回值、不带返回值、带参和不带参的函数委托万能的函数包装器执行

//注意：Args&&表示Universal引用，因为这里的参数可能被左值或右值初始化
//      Funciont&&也为Universal引用，如被lambda表达式初始化
template<typename Function, class...Args>
auto FuncWrapper(Function&& func, Args&& ...args)->decltype(func(std::forward<Args>(args)...))
{
    return func(std::forward<Args>(args)...);
}

void test0()
{
    cout << "void test0()" << endl;
}

int test1()
{
    return 1;
}

int test2(int x)
{
    return x;
}

string test3(string s1, string s2)
{
    return s1 + s2;
}

int main()
{
    
    FuncWrapper(test0);
    
    cout << "int test1(): "; 
    cout << FuncWrapper(test1) << endl;
    
    cout << "int test2(int x): " ;
    cout << FuncWrapper(test2, 1) << endl;
    
    cout << "string test3(string s1, string s2): ";
    cout << FuncWrapper(test3, "aa", "bb") << endl;
    
    cout << "[](int x, int y){return x + y;}: ";
    cout << FuncWrapper([](int x, int y){return x + y;}, 1,  2) << endl;
    
    return 0;
}
/*输出结果：
e:\Study\C++11\16>g++ -std=c++11 test3.cpp
e:\Study\C++11\16>a.exe
void test0()
int test1(): 1
int test2(int x): 1
string test3(string s1, string s2): aabb
[](int x, int y){return x + y}: 3
*/
复制代码
（2）emplace_back减少内存拷贝和移动

　　①emplace_back的实现原理类似于“万能函数包装器”，将参数std::forward转发给元素类的构造函数。实现上，首先为该元素开辟内存空间，然后在这片空间中调用placement new进行初始化，这相当于“就地”(在元素所在内存空间)调用元素对象的构造函数。

　　②而push_back会先将参数转为相应的元素类型，这需要调用一次构造函数，再将这个临时对象拷贝构造给容器内的元素对象，所以共需要一次构造和一次拷贝构造。从效率上看不如emplace_back，因为后者只需要一次调用一次构造即可。

　　③一般传入emplace_back的是构造函数所对应的参数(也只有这样传参才能节省一次拷贝构造)，所以要求对象有相应的构造函数，如果没有对应的构造函数，则只能用push_back，否则编译会报错。如emplace_back(int, int)，则要求元素对象需要有带两个int型的构造函数。

【编程实验】emplace_back减少内存拷贝和移动

复制代码
#include <iostream>
#include <vector>

using namespace std;

class Test
{
    int m_a;
public:
    static int m_count;
    
    Test(int a) : m_a(a)
    {
        cout <<"Test(int a)" << endl;
    }
    
    Test(const Test& t) : m_a(t.m_a)
    {
        ++m_count;
        cout << "Test(const Test& t)" << endl;
    }
    
    Test& operator=(const Test& t)
    {
        this->m_a = t.m_a;
        return *this;
    }
};

int Test::m_count = 0;

int main()
{
    //创建10个值为1的元素
    Test::m_count = 0;
    vector<Test> vec(10, 1); //首先将1转为Test(1)，会调用1次Test(int a)。然后，利用Test(1)去拷贝构造10个元素，所以
                             //调用10次拷贝构造。
    cout << "vec.capacity():" << vec.capacity() << ", "; //10
    cout << "vec.size():" << vec.size() <<  endl;        //10,空间己满
    
    Test::m_count = 0;
    vec.push_back(Test(1)); //由于capacity空间己满。首先调用Test(1)，然后再push_back中再拷贝
                            //构造10个元素（而不是1个，为了效率），所以调用10次拷贝构造
    cout << "vec.capacity():" << vec.capacity() << ", ";  //20
    cout << "vec.size():" << vec.size() <<  endl;         //11,空间未满
    
    Test::m_count = 0;
    vec.push_back(1);  //先调用Test(1)，然后调用1次拷贝构造
    cout << "vec.capacity():" << vec.capacity() << ", "; //20
    cout << "vec.size():" << vec.size() <<  endl;         //12,空间未满
    
    Test::m_count = 0;
    vec.emplace_back(1); //由于空间未满，直接在第12个元素位置调用placement new初始化那段空间
                         //所以就会调用构造函数，节省了调用拷贝构造的开销
    cout << "vec.capacity():" << vec.capacity() << ", "; //20
    cout << "vec.size():" << vec.size() <<  endl;        //13,空间未满
    
    Test::m_count = 0;
    vec.emplace_back(Test(1)); //先调用Test(1)，再调用拷贝构造（注意与vec.emplace_back(1)之间差异）
    cout << "vec.capacity():" << vec.capacity() << ", "; //20
    cout << "vec.size():" << vec.size() <<  endl;        //14,空间未满
    
    return 0;
}
/*输出结果
e:\Study\C++11\16>g++ -std=c++11 test4.cpp
e:\Study\C++11\16>a.exe
Test(int a)
...  //中间省略了调用10次Test(const Test& t)
vec.capacity():10, vec.size():10
Test(int a)
...  //中间省略了调用10次Test(const Test& t)
vec.capacity():20, vec.size():11
Test(int a)
Test(const Test& t)
vec.capacity():20, vec.size():12
Test(int a)
vec.capacity():20, vec.size():13
Test(int a)
Test(const Test& t)
vec.capacity():20, vec.size():14
*/

case1：
	void f(Widget&& param); //rvalue reference
	Widget&& var1 = Widget(); //rvalue reference
	auto&& var2 = var1; //not rvalue reference
	template<typename T>void f(std::vector<T>&& param) //rvalue referencete



