目的地址为本地地址的协议栈流程
--------------------------------------------------first ip_rcv-----------------------------------------------------------------------------
/*
 * 	Main IP Receive routine.
 在上一节可以看到，链路层将数据包上传到IP层时，由IP层相关协议的处理例程处理。对于IP协议，这个注册的处理例程是ip_rcv()，它处理
 完成后交给NETFILTE（PRE-ROUTING）R过滤，再上递给ip_rcv_finish(), 这个函数根据skb包中的路由信息，决定这个数据包是转发还是上交
 给本机，由此产生两条路径，一为ip_local_deliver()，它首先检查这个包是否是一个分片包，如果是，它要调动ip_defrag()将分片重装，
 然后再次将包将给NETFILTER（LOCAL_IN）过滤后，再由ip_local_deliver_finish()将数据上传到L4层，这样就完成了IP 层的处理；它
 负责将数据上传，另一路径为ip_forward()，它负责将数据转发，经由NETFILTER（FORWARD）
 过滤后将给ip_forward_finish()，然后调用dst_output()将数据包发送出去。
------------------------------------------------------------------------------------------

|----------------------------------| 

         应用层

|----------------------------------|

　    BSD Socket层

|----------------------------------|　

      Inet Socket层

|----------------------------------|

      IP层

|----------------------------------|

  数据链路/硬件层

|----------------------------------|

IP层：          IP协议栈的实现，完成路由的查找过程(主要处理skb)
Inet Socket层： 对IP包进行分组排序，实现QoS,传输层协议TCP/UDP协议栈的实现
　　　　　　    使用sock{}类型数据来管理会话，数据主要放在sk_buff结构中　　　
BSD Socket:     对于BSD Socket相关调用的实现,主要使用socket{}结构来存放连接
                数据主要是放在msghdr{}结构中

 参考:http://www.2cto.com/Article/201206/136644.html
 ip_rcv函数。该函数主要用来处理网络层的IP报文的入口函数，它到Netfilter框架的切入点为：
 NF_HOOK(PF_INET, NF_IP_PRE_ROUTING, skb, dev, NULL,ip_rcv_finish)
 根据前面的理解，这句代码意义已经很直观明确了。那就是：如果协议栈当前收到了一个IP报文(PF_INET)，那么就把这个报文传到Netfilter
 的NF_IP_PRE_ROUTING过滤点，去检查[R]在那个过滤点(nf_hooks[2][0])是否已经有人注册了相关的用于处理数据包的钩子函数。如果有，
 则挨个去遍历链表nf_hooks[2][0]去寻找匹配的match和相应的target，根据返回到Netfilter框架中的值来进一步决定该如何处理该数据包
 (由钩子模块处理还是交由ip_rcv_finish函数继续处理)。
 
 [R]：刚才说到所谓的“检查”。其核心就是nf_hook_slow()函数。该函数本质上做的事情很简单，根据优先级查找双向链表nf_hooks[][]，
 找到对应的回调函数来处理数据包：

 最后,数据包会传到l3层,如果是ip协议,则相应的处理函数为ip_rcv,到此数据报从网卡到l3层的接收过程已经完毕.即总的路线是: 
 netif_rx-->net_rx_action-->process_backlog-->netif_receive_skb-- >sniffer(如果有)-->diverter(如果有)-->bridge(如果有)-->ip_rcv(或者其他的l3 层协议处理函数)
 */
 /*
接收数据包的下半部处理流程为：
net_rx_action // 软中断
    |--> process_backlog() // 默认poll
               |--> __netif_receive_skb() // L2处理函数
                            |--> ip_rcv() // L3入口

*/

/*
 * 	Main IP Receive routine.
 * @skb: 接收到的IP数据包
 * @dev: 接收到的IP数据包当前的输入网络设备
 * @pt:输入此数据包的网络层输入接口
 * @orig_dev:接收到的IP数据包原始的输入网络设备。
 */
 //在data指针移动size(iphdr)后，移动到指向传输层的函数是ip_local_deliver_finish
 //如果有发送到本地的数据包，本地收到后可能需要从组，在函数ip_local_deliver中从组
int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
{
	struct iphdr *iph;//定义一个ip报文的数据报头
	u32 len;

	if((0 == dev_d1300) || (dev->name[3] != '2')) {
		/* When the interface is in promisc. mode, drop all the crap
		 * that it receives, do not try to analyse it.
		 */
		if (skb->pkt_type == PACKET_OTHERHOST) //数据包不是发给我们的,这里所说的“不属于”这个主机，是指在这个包目标主机的MAC地址不是本机，而不是L3层的ip地址。
			goto drop;
	}


	IP_UPD_PO_STATS_BH(dev_net(dev), IPSTATS_MIB_IN, skb->len); 

	if ((skb = skb_share_check(skb, GFP_ATOMIC)) == NULL) {//接下来是一个共享的检查，如果是共享的数据包，因为它可能需要修改skb中的信息，所以要先复制一个副本，再作进一步的处理。
		IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_INDISCARDS);
		goto out;
	}

	if (!pskb_may_pull(skb, sizeof(struct iphdr)))//再下来就是检查首部的长度是否够长，校检和等等：
		goto inhdr_error;

	iph = ip_hdr(skb);

	/*
	 *	RFC1122: 3.2.1.2 MUST silently discard any IP frame that fails the checksum.
	 *
	 *	Is the datagram acceptable?
	 *
	 *	1.	Length at least the size of an ip header
	 *	2.	Version of 4
	 *	3.	Checksums correctly. [Speed optimisation for later, skip loopback checksums]
	 *	4.	Doesn't have a bogus length
	 */

	if (iph->ihl < 5 || iph->version != 4)
		goto inhdr_error;
/*
//iph->ihl<5说明iph->ihl指的是IP包的首部长度，首部一行是32bit也就是4byte（字节）注：1byte=8bit，byte是计算机中最小文件
单位，普通IP数据包首部长度（不包含任何选项）字段的值是5.*/
	if (!pskb_may_pull(skb, iph->ihl*4))//对数据报的头长度进行检查  //iph->ihl*4是20，是首部最长的长度,此语句是说如果头部长度不能pull，则error
		goto inhdr_error;

	iph = ip_hdr(skb);

	if (unlikely(ip_fast_csum((u8 *)iph, iph->ihl)))
		goto inhdr_error;

	len = ntohs(iph->tot_len);
	if (skb->len < len) {
		IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_INTRUNCATEDPKTS);
		goto drop;
	} else if (len < (iph->ihl*4))
		goto inhdr_error;

	/* Our transport medium may have padded the buffer out. Now we know it
	 * is IP we can trim to the true length of the frame.
	 * Note this now means skb->len holds ntohs(iph->tot_len).
	 */
	if (pskb_trim_rcsum(skb, len)) {//根据ip包总长度，重新计算skb的长度，去掉末尾的无用信息
		IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_INDISCARDS);
		goto drop;
	}

	/* Remove any debris in the socket control block */
	memset(IPCB(skb), 0, sizeof(struct inet_skb_parm));//这里面后面会存ip填充信息，IP如果超过20字节，就有填充信息

	/* Must drop socket now because of tproxy. */
	/*
	 * 将skb中的IP控制块清零，以便
	 * 后续对IP选项的处理
	 */
	skb_orphan(skb);

    /*
         * 最后通过netfilter模块处理后，调用ip_rcv_finish()
         * 完成IP数据包的输入。
         */
	return NF_HOOK(NFPROTO_IPV4, NF_INET_PRE_ROUTING, skb, dev, NULL,
		       ip_rcv_finish); //hook注册地方在nf_register_hooks

inhdr_error:
	IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_INHDRERRORS);
drop:
	kfree_skb(skb);
out:
	return NET_RX_DROP;
}

--------------------------------------------------second ip_rcv_finish-----------------------------------------------------------------------------
/*
 * ip_rcv_finish()在ip_rcv()中当IP数据包经过netfilter模块
 * 处理后被调用。完成的主要功能是，如果
 * 还没有为该数据包查找输入路由缓存，则
 * 调用ip_route_input()为其查找输入路由缓存。
 * 接着处理IP数据包首部中的选项，最后
 * 根据输入路由缓存输入到本地或抓发。
 */
static int ip_rcv_finish(struct sk_buff *skb)
{
	const struct iphdr *iph = ip_hdr(skb);
	struct rtable *rt;

	/*
	 *	Initialise the virtual path cache for the packet. It describes
	 *	how the packet travels inside Linux networking.
	 */
	/*
	 * 如果还没有为该数据包查找输入路由缓存，
	 * 则调用ip_route_input()为其查找输入路由缓存。
	 * 若查找失败，则将该数据包丢弃。
	 */
	if (skb_dst(skb) == NULL) {
              /* 选择路由*/
		int err = ip_route_input(skb, iph->daddr, iph->saddr, iph->tos,
					 skb->dev);//最终会调用ip_local_deliver
		if (unlikely(err)) {
			if (err == -EHOSTUNREACH)
				IP_INC_STATS_BH(dev_net(skb->dev),
						IPSTATS_MIB_INADDRERRORS);
			else if (err == -ENETUNREACH)
				IP_INC_STATS_BH(dev_net(skb->dev),
						IPSTATS_MIB_INNOROUTES);
			goto drop;
		}
	}

#ifdef CONFIG_NET_CLS_ROUTE
	if (unlikely(skb_dst(skb)->tclassid)) {
		struct ip_rt_acct *st = per_cpu_ptr(ip_rt_acct, smp_processor_id());
		u32 idx = skb_dst(skb)->tclassid;
		st[idx&0xFF].o_packets++;
		st[idx&0xFF].o_bytes += skb->len;
		st[(idx>>16)&0xFF].i_packets++;
		st[(idx>>16)&0xFF].i_bytes += skb->len;
	}
#endif

	/*
	 * 根据长度判断IP首部中是否存在选项，如果有，
	 * 则调用ip_rcv_options()处理IP选项。
	 */
	if (iph->ihl > 5 && ip_rcv_options(skb))
		goto drop;

	rt = skb_rtable(skb);
	if (rt->rt_type == RTN_MULTICAST) {
		IP_UPD_PO_STATS_BH(dev_net(rt->u.dst.dev), IPSTATS_MIB_INMCAST,
				skb->len);
	} else if (rt->rt_type == RTN_BROADCAST)
		IP_UPD_PO_STATS_BH(dev_net(rt->u.dst.dev), IPSTATS_MIB_INBCAST,
				skb->len);

	/*
	 * 最后根据输入路由缓存决定输入到本地或
	 * 转发，最终前者调用ip_local_deliver()，后者调用
	 * ip_forward()。
	 * 对于输入到本地或转发的组播报文，在经过netfilter处理
	 * 之后会调用ip_rcv_finish()正式进入输入的处理。先调用
	 * ip_route_input()进行输入路由的查询，如果发现目的地址
	 * 为组播地址，就会按照组播地址的规则查找路由，查找
	 * 到组播的输入路由后，组播报文接收处理函数为ip_mr_input()。
	 * 参见ip_route_input_mc().
	 */
	return dst_input(skb);//ip_route_input->ip_route_input_common->ip_route_input_slow中有注册  ip_local_deliver;//到本地  ip_forward转发

drop:
	kfree_skb(skb);
	return NET_RX_DROP;
}

--------------------------------------------------four ip_local_deliver-----------------------------------------------------------------------------

/*
 * 	Deliver IP Packets to the higher protocol layers.
 */
 /*
  * 在ip_route_input进行路由选择后，如果接收的包
  * 是发送给本机，则调用ip_local_deliver来传递给上层协议
  */
  //ip_route_input_slow->ip_local_deliver
int ip_local_deliver(struct sk_buff *skb)
{
    /*
     *  Reassemble IP fragments.
     */
        /* 
         * frag_off是16位，其中高3位用作标志位，
         * 低13位才是真正的偏移量.
         * 内核可通过设置的分片标识位或非0
         * 的分片偏移量识别分片的分组。偏移
         * 量字段为0，表明这是分组的最后一个分片。
         * 
         * 如果接收到的IP数据包时分片，则调用
         * ip_defrag()进行重组，其标志位IP_DEFRAG_LOCAL_DELIVER。
         */
    if (ip_hdr(skb)->frag_off & htons(IP_MF | IP_OFFSET)) {
       /*
        * 重新组合分片分组的各个部分。
        * 
        * 如果ip_defrag()返回非0，则表示IP数据包分片
        * 尚未到齐，重组没有完成，或者出错，直接
        * 返回。为0，则表示已完成IP数据包的重组，
        * 需要传递到传输层进行处理。
        */
        if (ip_defrag(skb, IP_DEFRAG_LOCAL_DELIVER))
            return 0;
    }

    /*
     * 经过netfilter处理后，调用ip_local_deliver_finish()，
     * 将组装完成的IP数据包传送到传输层处理
     */
    return NF_HOOK(PF_INET, NF_INET_LOCAL_IN, skb, skb->dev, NULL,
               ip_local_deliver_finish);
}
--------------------------------------------------five ip_local_deliver_finish-----------------------------------------------------------------------------
//从这里进入L4传输层
/*
 * ip_local_deliver_finish()将输入数据包从网络层传递
 * 到传输层。过程如下:
 * 1)首先，在数据包传递给传输层之前，去掉IP首部
 * 2)接着，如果是RAW套接字接收数据包，则需要
 * 复制一份副本，输入到接收该数据包的套接字。
 * 3)最后，通过传输层的接收例程，将数据包传递
 * 到传输层，由传输层进行处理。
 */
static int ip_local_deliver_finish(struct sk_buff *skb)
{
	struct net *net = dev_net(skb->dev);

	/*
	 * 在数据包传递给传输层之前，先去掉
	 * IP首部。
	 */
	__skb_pull(skb, ip_hdrlen(skb));

	/* Point into the IP datagram, just past the header. */
       /* "删除"IP 首部*/
	skb_reset_transport_header(skb);

	rcu_read_lock();
	{     /* 获取该IP包承载的上层协议,也就是传输层协议号，用于计算后面的hash*/
		int protocol = ip_hdr(skb)->protocol;
		int hash, raw;
		const struct net_protocol *ipprot;

	resubmit:
		/*
		 * 处理RAW套接字，先根据传输层协议号
		 * 得到哈希值，然后查看raw_v4_htable散列表
		 * 中以该值为关键字的哈希桶是否为空，
		 * 如果不为空，则说明创建了RAW套接字，
		 * 复制该数据包的副本输入到注册到
		 * 该桶中的所有套接字。
		 */
/*
ip_local_deliver_finish函数会先检查哈希表raw_v4_htable。因为在创建 socket时，inet_create会把协议号IPPROTO_ICMP的值赋给socket的成员num，
并以num为键值，把socket存入哈 项表raw_v4_htable，raw_v4_htable[IPPROTO_ICMP&(MAX_INET_PROTOS-1)]上即存放了 这个socket，实际上是一个socket的链表，
如果其它还有socket要处理这个回显应答，也会被放到这里，组成一个链 表，ip_local_deliver_finish收到数据报后，取出这个socket链表(目前实际上只有一项)，
调用raw_v4_input，把 skb交给每一个socket进行处理。然后，还需要把数据报交给inet_protos[IPPROTO_ICMP& (MAX_INET_PROTOS-1)]，即icmp_rcv处理，
因为对于icmp报文，每一个都是需要经过协议栈处理的，但对回显应 答，icmp_rcv只是简单丢弃，并未实际处理。
*/
		 ////之前开巨帧的时候，icmp不通就是在这里面的函数中sock_queue_rcv_skb丢的
		raw = raw_local_deliver(skb, protocol); //如果是raw套接字，则则该函数里面会复制一份skb，然后送到，例如用ping 1.2.2.2的时候，会走这里面，不会走icmp_recv

		hash = protocol & (MAX_INET_PROTOS - 1);
		ipprot = rcu_dereference(inet_protos[hash]);
		/*
		 * 通过查找inet_portos数组，确定是否
		 * 注册了与IP首部中传输层协议号
		 * 一致的传输层协议。若查找命中，
		 * 则执行对应的传输层协议例程。
		 */
		if (ipprot != NULL) {
			int ret;

			if (!net_eq(net, &init_net) && !ipprot->netns_ok) {
				if (net_ratelimit())
					printk("%s: proto %d isn't netns-ready\n",
						__func__, protocol);
				kfree_skb(skb);
				goto out;
			}

			if (!ipprot->no_policy) {
				if (!xfrm4_policy_check(NULL, XFRM_POLICY_IN, skb)) {
					kfree_skb(skb);
					goto out;
				}
				nf_reset(skb);
			}
			ret = ipprot->handler(skb);//这里面会进入udp tcp传输层去
			if (ret < 0) {
				protocol = -ret;
				goto resubmit;
			}
			IP_INC_STATS_BH(net, IPSTATS_MIB_INDELIVERS);
		} else {
			/*
			 * 如果没有响应的协议传输层接收该数据包，
			 * 则释放该数据包。在释放前，如果是RAW
			 * 套接字没有接收或接收异常，则还需产生
			 * 一个目的不可达ICMP报文给发送方。表示该包raw没有接收并且inet_protos中没有注册该协议
			 */
			if (!raw) {
				if (xfrm4_policy_check(NULL, XFRM_POLICY_IN, skb)) {
					IP_INC_STATS_BH(net, IPSTATS_MIB_INUNKNOWNPROTOS);
					icmp_send(skb, ICMP_DEST_UNREACH,
						  ICMP_PROT_UNREACH, 0);
				}
			} else
				IP_INC_STATS_BH(net, IPSTATS_MIB_INDELIVERS);
			kfree_skb(skb);
		}
	}
 out:
	rcu_read_unlock();

	return 0;
}

目的地址为需要转发的协议栈流程（重复流程参上）
--------------------------------------------------first ip_forward-----------------------------------------------------------------------------

//在函数ip_route_input_slow->ip_mkroute_input注册，
/*
 * IP数据包的转发是由ip_forward()处理，该函数在ip_rcv_finish()
 * 通过输入路由缓存被调用。
 */
int ip_forward(struct sk_buff *skb)
{
	struct iphdr *iph;	/* Our header */
	struct rtable *rt;	/* Route we use */
	struct ip_options * opt	= &(IPCB(skb)->opt);

	if (skb_warn_if_lro(skb))
		goto drop;

	if (!xfrm4_policy_check(NULL, XFRM_POLICY_FWD, skb))
		goto drop;

	if (IPCB(skb)->opt.router_alert && ip_call_ra_chain(skb))
		return NET_RX_SUCCESS;

	if (skb->pkt_type != PACKET_HOST)
		goto drop;

	skb_forward_csum(skb);

	/*
	 *	According to the RFC, we must first decrease the TTL field. If
	 *	that reaches zero, we must reply an ICMP control message telling
	 *	that the packet's lifetime expired.
	 */
	if (ip_hdr(skb)->ttl <= 1)
		goto too_many_hops;

	if (!xfrm4_route_forward(skb))
		goto drop;

	rt = skb_rtable(skb);

	if (opt->is_strictroute && rt->rt_dst != rt->rt_gateway)
		goto sr_failed;

	if (unlikely(skb->len > dst_mtu(&rt->u.dst) && !skb_is_gso(skb) &&
		     (ip_hdr(skb)->frag_off & htons(IP_DF))) && !skb->local_df) {
		IP_INC_STATS(dev_net(rt->u.dst.dev), IPSTATS_MIB_FRAGFAILS);
		icmp_send(skb, ICMP_DEST_UNREACH, ICMP_FRAG_NEEDED,
			  htonl(dst_mtu(&rt->u.dst)));
		goto drop;
	}

	/* We are about to mangle packet. Copy it! */
	if (skb_cow(skb, LL_RESERVED_SPACE(rt->u.dst.dev)+rt->u.dst.header_len))
		goto drop;
	iph = ip_hdr(skb);

	/* Decrease ttl after skb cow done */
	ip_decrease_ttl(iph);

	/*
	 *	We now generate an ICMP HOST REDIRECT giving the route
	 *	we calculated.
	 */
	if (rt->rt_flags&RTCF_DOREDIRECT && !opt->srr && !skb_sec_path(skb))
		ip_rt_send_redirect(skb);

	skb->priority = rt_tos2priority(iph->tos);

	return NF_HOOK(NFPROTO_IPV4, NF_INET_FORWARD, skb, skb->dev,
		       rt->u.dst.dev, ip_forward_finish);

sr_failed:
	/*
	 *	Strict routing permits no gatewaying
	 */
	 icmp_send(skb, ICMP_DEST_UNREACH, ICMP_SR_FAILED, 0);
	 goto drop;

too_many_hops:
	/* Tell the sender its packet died... */
	IP_INC_STATS_BH(dev_net(skb_dst(skb)->dev), IPSTATS_MIB_INHDRERRORS);
	icmp_send(skb, ICMP_TIME_EXCEEDED, ICMP_EXC_TTL, 0);
drop:
	kfree_skb(skb);
	return NET_RX_DROP;
}
--------------------------------------------------second ip_forward-----------------------------------------------------------------------------


static int ip_forward_finish(struct sk_buff *skb)
{
	struct ip_options * opt	= &(IPCB(skb)->opt);

	IP_INC_STATS_BH(dev_net(skb_dst(skb)->dev), IPSTATS_MIB_OUTFORWDATAGRAMS);

	if (unlikely(opt->optlen))
		ip_forward_options(skb);

	return dst_output(skb);
}

--------------------------------------------------three ip_forward-----------------------------------------------------------------------------

/*
 * 对于单播数据包，目的路由缓存项中的输出接口是ip_output().
 */
int ip_output(struct sk_buff *skb)
{
	struct net_device *dev = skb_dst(skb)->dev;

	IP_UPD_PO_STATS(dev_net(dev), IPSTATS_MIB_OUT, skb->len);

	/*
	 * 设置数据包的输出网络设备和数据包网络
	 * 层协议类型。
	 */
	skb->dev = dev;
	skb->protocol = htons(ETH_P_IP);

	/*
	 * 经netfilter处理后，调用ip_finish_output()继续IP数据包的输出
	 */
	return NF_HOOK_COND(PF_INET, NF_INET_POST_ROUTING, skb, NULL, dev,
			    ip_finish_output,
			    !(IPCB(skb)->flags & IPSKB_REROUTED));
}
/*
 * 对于多播数据包，目的路由缓存项中的输出接口是ip_mc_output（）.
 */
int ip_mc_output(struct sk_buff *skb)
{
	struct sock *sk = skb->sk;
	struct rtable *rt = skb_rtable(skb);
	struct net_device *dev = rt->u.dst.dev;

	/*
	 *	If the indicated interface is up and running, send the packet.
	 */
	IP_UPD_PO_STATS(dev_net(dev), IPSTATS_MIB_OUT, skb->len);

	skb->dev = dev;
	skb->protocol = htons(ETH_P_IP);

	/*
	 *	Multicasts are looped back for other local users
	 */

	if (rt->rt_flags&RTCF_MULTICAST) {
		if (sk_mc_loop(sk)
#ifdef CONFIG_IP_MROUTE
		/* Small optimization: do not loopback not local frames,
		   which returned after forwarding; they will be  dropped
		   by ip_mr_input in any case.
		   Note, that local frames are looped back to be delivered
		   to local recipients.

		   This check is duplicated in ip_mr_input at the moment.
		 */
		    &&
		    ((rt->rt_flags & RTCF_LOCAL) ||
		     !(IPCB(skb)->flags & IPSKB_FORWARDED))
#endif
		   ) {
			struct sk_buff *newskb = skb_clone(skb, GFP_ATOMIC);
			if (newskb)
				NF_HOOK(NFPROTO_IPV4, NF_INET_POST_ROUTING,
					newskb, NULL, newskb->dev,
					ip_dev_loopback_xmit);
		}

		/* Multicasts with ttl 0 must not go beyond the host */

		if (ip_hdr(skb)->ttl == 0) {
			kfree_skb(skb);
			return 0;
		}
	}

	if (rt->rt_flags&RTCF_BROADCAST) {
		struct sk_buff *newskb = skb_clone(skb, GFP_ATOMIC);
		if (newskb)
			NF_HOOK(NFPROTO_IPV4, NF_INET_POST_ROUTING, newskb,
				NULL, newskb->dev, ip_dev_loopback_xmit);
	}

	return NF_HOOK_COND(NFPROTO_IPV4, NF_INET_POST_ROUTING, skb, NULL,
			    skb->dev, ip_finish_output,
			    !(IPCB(skb)->flags & IPSKB_REROUTED));
}


数据包出网卡流程
--------------------------------------------------first ip_queue_xmit-----------------------------------------------------------------------------

/*
 * 在TCP中，将TCP段打包成IP数据包的方法根据TCP段类型
 * 的不同而有多种接口。其中最常用的就是ip_queue_xmit()，
 * 而ip_build_and_send_pkt()和ip_send_reply()只有在发送特定段时
 * 才会被调用。
 * @skb: 待封装成IP数据包的TCP段。
 * @ipfragok: 标识待输出的数据是否已经完成分片。由于
 * 在调用函数时ipfragok参数总为0，因此输出的IP数据包
 * 是否分片取决于是否启用PMTU发现。
 */ //TCP发送的时候从tcp_transmit_skb函数里面跳转过来
int ip_queue_xmit(struct sk_buff *skb, int ipfragok)
{
	struct sock *sk = skb->sk;
	struct inet_sock *inet = inet_sk(sk);
	struct ip_options *opt = inet->opt;
	struct rtable *rt;
	struct iphdr *iph;

	/* Skip all of this if the packet is already routed,
	 * f.e. by something like SCTP.
	 */
	/*
	 * 如果待输出的数据包已准备好路由缓存，
	 * 则无需再查找路由，直接跳转到packet_routed
	 * 处作处理。
	 */
	rt = skb_rtable(skb);
	if (rt != NULL)
		goto packet_routed;

	/* Make sure we can route this packet. */
	/*
	 * 如果输出该数据包的传输控制块中
	 * 缓存了输出路由缓存项，则需检测
	 * 该路由缓存项是否过期。
	 * 如果过期，重新通过输出网络设备、
	 * 目的地址、源地址等信息查找输出
	 * 路由缓存项。如果查找到对应的路
	 * 由缓存项，则将其缓存到传输控制
	 * 块中，否则丢弃该数据包。
	 * 如果未过期，则直接使用缓存在
	 * 传输控制块中的路由缓存项。
	 */
	rt = (struct rtable *)__sk_dst_check(sk, 0);
	if (rt == NULL) {
		__be32 daddr;

		/* Use correct destination address if we have options. */
		daddr = inet->daddr;
		if(opt && opt->srr)
			daddr = opt->faddr;

		{
			struct flowi fl = { .oif = sk->sk_bound_dev_if,
					    .mark = sk->sk_mark,
					    .nl_u = { .ip4_u =
						      { .daddr = daddr,
							.saddr = inet->saddr,
							.tos = RT_CONN_FLAGS(sk) } },
					    .proto = sk->sk_protocol,
					    .flags = inet_sk_flowi_flags(sk),
					    .uli_u = { .ports =
						       { .sport = inet->sport,
							 .dport = inet->dport } } };

			/* If this fails, retransmit mechanism of transport layer will
			 * keep trying until route appears or the connection times
			 * itself out.
			 */
			security_sk_classify_flow(sk, &fl);
			if (ip_route_output_flow(sock_net(sk), &rt, &fl, sk, 0))
				goto no_route;
		}
		sk_setup_caps(sk, &rt->u.dst);
	}
	skb_dst_set(skb, dst_clone(&rt->u.dst));

packet_routed:
	/*
	 * 查找到输出路由后，先进行严格源路由
	 * 选项的处理。如果存在严格源路由选项，
	 * 并且数据包的下一跳地址和网关地址不
	 * 一致，则丢弃该数据包。
	 */
	if (opt && opt->is_strictroute && rt->rt_dst != rt->rt_gateway)
		goto no_route;

	/* OK, we know where to send it, allocate and build IP header. */
	/*
	 * 设置IP首部中各字段的值。如果存在IP选项，
	 * 则在IP数据包首部中构建IP选项。
	 */
	skb_push(skb, sizeof(struct iphdr) + (opt ? opt->optlen : 0));
	skb_reset_network_header(skb);
	iph = ip_hdr(skb);
	*((__be16 *)iph) = htons((4 << 12) | (5 << 8) | (inet->tos & 0xff));
	if (ip_dont_fragment(sk, &rt->u.dst) && !ipfragok)
		iph->frag_off = htons(IP_DF);
	else
		iph->frag_off = 0;
	iph->ttl      = ip_select_ttl(inet, &rt->u.dst);
	iph->protocol = sk->sk_protocol;
	iph->saddr    = rt->rt_src;  //这里为什么是路由的src和dst ??????????????????????????????????????????//
	iph->daddr    = rt->rt_dst;
	/* Transport layer set skb->h.foo itself. */

	if (opt && opt->optlen) {
		iph->ihl += opt->optlen >> 2;
		ip_options_build(skb, opt, inet->daddr, rt, 0);
	}

	ip_select_ident_more(iph, &rt->u.dst, sk,
			     (skb_shinfo(skb)->gso_segs ?: 1) - 1);

	/*
	 * 设置输出数据包的QoS类型。
	 */
	skb->priority = sk->sk_priority;
	skb->mark = sk->sk_mark;

	return ip_local_out(skb);

no_route:
	/*
	 * 如果查找不到对应的路由缓存项，
	 * 在此处理，将该数据包丢弃。
	 */
	IP_INC_STATS(sock_net(sk), IPSTATS_MIB_OUTNOROUTES);
	kfree_skb(skb);
	return -EHOSTUNREACH;
}

--------------------------------------------------second ip_output-----------------------------------------------------------------------------

/*
 * 对于单播数据包，目的路由缓存项中的输出接口是ip_output().
 */
int ip_output(struct sk_buff *skb)
{
	struct net_device *dev = skb_dst(skb)->dev;

	IP_UPD_PO_STATS(dev_net(dev), IPSTATS_MIB_OUT, skb->len);

	/*
	 * 设置数据包的输出网络设备和数据包网络
	 * 层协议类型。
	 */
	skb->dev = dev;
	skb->protocol = htons(ETH_P_IP);

	/*
	 * 经netfilter处理后，调用ip_finish_output()继续IP数据包的输出
	 */
	return NF_HOOK_COND(PF_INET, NF_INET_POST_ROUTING, skb, NULL, dev,
			    ip_finish_output,
			    !(IPCB(skb)->flags & IPSKB_REROUTED));
}

--------------------------------------------------three ip_output-----------------------------------------------------------------------------

static int ip_finish_output(struct sk_buff *skb)
{
#if defined(CONFIG_NETFILTER) && defined(CONFIG_XFRM)
	/* Policy lookup after SNAT yielded a new policy */
	if (skb_dst(skb)->xfrm != NULL) {
		IPCB(skb)->flags |= IPSKB_REROUTED;
		return dst_output(skb);
	}
#endif/*
	 /* 如果数据包长度大于MTU，则调用ip_fragment()
	 * 对IP数据包进行分片。
	 */
	if (skb->len > ip_skb_dst_mtu(skb) && !skb_is_gso(skb)) //如果不支持TSO或者GSO，tcp发送的时候是按照mss来组织skb的，所以skb->len会等于mtu  所以TCP叫分段，和IP分片不一样，只有UDP才有IP分片
		return ip_fragment(skb, ip_finish_output2);//SKB不是gso类型，并且skb->len大于mtu则需要分片   对方接受后的分片重组在netfilter中的ipv4_conntrack_defrag
	else
		return ip_finish_output2(skb);//如果报文长度小于mtu，或者skb是gso的，则走这里
}


--------------------------------------------------three ip_output-----------------------------------------------------------------------------

/*
 * 此函数通过邻居子系统将数据包输出
 * 到网络设备。
 */
static inline int ip_finish_output2(struct sk_buff *skb)
{
	struct dst_entry *dst = skb_dst(skb);
	struct rtable *rt = (struct rtable *)dst;
	struct net_device *dev = dst->dev;
	unsigned int hh_len = LL_RESERVED_SPACE(dev);

	if (rt->rt_type == RTN_MULTICAST) {
		IP_UPD_PO_STATS(dev_net(dev), IPSTATS_MIB_OUTMCAST, skb->len);
	} else if (rt->rt_type == RTN_BROADCAST)
		IP_UPD_PO_STATS(dev_net(dev), IPSTATS_MIB_OUTBCAST, skb->len);

	/* Be paranoid, rather than too clever. */
	/*
	 * 检测skb的前部空间是否还能存储链路层首部。
	 * 如果不够，则重新分配更大存储区的skb，
	 * 并释放原skb。
	 */
	if (unlikely(skb_headroom(skb) < hh_len && dev->header_ops)) {
		struct sk_buff *skb2;

		skb2 = skb_realloc_headroom(skb, LL_RESERVED_SPACE(dev));
		if (skb2 == NULL) {
			kfree_skb(skb);
			return -ENOMEM;
		}
		if (skb->sk)
			skb_set_owner_w(skb2, skb->sk);
		kfree_skb(skb);
		skb = skb2;
	}

	/*
	 * 如果缓存了链路层的首部，则调用
	 * neigh_hh_output()输出数据包。否则，
	 * 若存在对应的邻居项，则通过
	 * 邻居项的输出方法输出数据包。
	 */ //最后调用二层函数dev_queue_xmit
	if (dst->hh)
		return neigh_hh_output(dst->hh, skb);
	else if (dst->neighbour)
		return dst->neighbour->output(skb);

	/*
	 * 如果既没有缓存链路层的首部，又
	 * 不存在对应的邻居项，在这种情况
	 * 下，不能输出，释放该数据包。
	 */
	if (net_ratelimit())
		printk(KERN_DEBUG "ip_finish_output2: No header cache and no neighbour!\n");
	kfree_skb(skb);
	return -EINVAL;
}
